#!/bin/sh
#
# wclock
#
# Copyright (c) 2021-2022 K. Eugene Carlson  Tsukuba, Japan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# A world clock script for terminal emulator and tty use.
#

# "make install" sets these values at installation time.
VER=
SHAREDIR=
ZONEPRELIM=
ZONEINFO="$ZONEPRELIM"
TIMESETTER=

# This method checks the potential zoneinfo/suffix directory to make sure the
# relevant subdirectories are populated.

validate_zoneinfo () {
unset CHECKZONEINFO

if [ ! -f "$1"/Africa/Cairo ] || \
   [ ! -f "$1"/America/Sao_Paulo ] || \
   [ ! -f "$1"/America/Argentina/Cordoba ] || \
   [ ! -f "$1"/America/Indiana/Indianapolis ] || \
   [ ! -f "$1"/America/Kentucky/Louisville ] || \
   [ ! -f "$1"/America/North_Dakota/Center ] || \
   [ ! -f "$1"/Antarctica/McMurdo ] || \
   [ ! -f "$1"/Asia/Tokyo ] || \
   [ ! -f "$1"/Atlantic/Canary ] || \
   [ ! -f "$1"/Australia/Sydney ] || \
   [ ! -f "$1"/Etc/GMT ] || \
   [ ! -f "$1"/Europe/Moscow ] || \
   [ ! -f "$1"/Indian/Reunion ] || \
   [ ! -f "$1"/Pacific/Auckland ]; then
  CHECKZONEINFO=yes
fi
}

# This method selects a zoneinfo directory. If an appropriate zoneinfo directory
# was passed to "make install," it will not run.

getzoneinfo (){
for x in /usr/share/zoneinfo-leaps \
   /usr/share/zoneinfo \
   /usr/local/share/zoneinfo-leaps \
   /usr/local/share/zoneinfo \
   /etc/zoneinfo-leaps \
   /etc/zoneinfo; do
  if [ -d "$x" ]; then
    for suffix in right posix; do
      validate_zoneinfo "$x"/"$suffix"
      if [ -z "$CHECKZONEINFO" ]; then
        ZONEINFO="$x"
        SUFFIX="$suffix"/
        return
      fi
    done
    validate_zoneinfo "$x"
    if [ -z "$CHECKZONEINFO" ]; then
      ZONEINFO="$x"
      return
    fi
  fi
done
echo
echo '	'A well-formed zoneinfo directory was not found. Exiting.
echo
exit
}

# This method checks the provided zoneinfo directory (if any) and calls
# getzoneinfo if necessary.

checkzoneinfo (){
# Acquiring zoneinfo if necessary, exiting if none can be found.
if [ ! -d "$ZONEINFO" ]; then
  getzoneinfo
else
  # Making sure that zoneinfo is well-formed.
  for suffix in right posix; do
    validate_zoneinfo "$ZONEINFO"/"$suffix"
    [ -z "$CHECKZONEINFO" ] && SUFFIX="$suffix"/ && return
  done
  validate_zoneinfo "$ZONEINFO"
  [ "$CHECKZONEINFO" = "yes" ] && getzoneinfo
fi

SLASHES="$(echo "$ZONEINFO/$SUFFIX" | tr -cd '/' | wc -c)"
SLASHES=$((SLASHES + 1))
}

# Use this method to check on potential files that set the time zone.

tzfilecheck (){
# Simplest case: the file is a time zone file (or a symlink to a time zone
# file).
unset PWD
PWD="$(pwd)"
cd "$(dirname "$1")"
CHECKER="$(file -b "$(readlink -e "$1")" | grep timezone)"
[ -n "$CHECKER" ] && HEREZONE="$1"
cd "$PWD"
# The file is a text document with a time zone.
if [ ! -h "$1" ] && [ -z "$HEREZONE" ]; then
  HEREZONE="$(cat "$1")"
  CHECKER2="$(find "$ZONEINFO" -type f,l | grep -i -m 1 "$HEREZONE")"
  [ -z "$CHECKER2" ] && unset HEREZONE
fi
[ -n "$HEREZONE" ] && WORKING=yes
}

# This method displays the results (empty echoes and other messaging handled in
# main, comparemethod, etc.).

timedisplay (){
case "$1" in
  NOFIGURE)
  [ -z "$WRITTEN2" ] && echo '	'"$(date "$ENTRY" +"%X %Z %x (%a)")"'	'Here
  echo '	'"$(TZ="$place" date "$ENTRY" +"%X %Z %x (%a)")"'	'"$headup"
  ;;
  NOCHECK)
  headup="$place"
  [ -z "$WRITTEN" ] && echo '	'"$name" && WRITTEN=yes
  [ -z "$TCPARAMS" ] && echo '	'"$(TZ="$place" date +"%X %Z %x (%a)")"'	'"$headup"
  [ -n "$TCPARAMS" ] && comparemethod
  ;;
  NOHEADER)
  headup="$name ($place)"
  [ -n "$(echo "$headups" | grep -m 1 "$headup")" ] && return
  [ -z "$TCPARAMS" ] && echo '	'"$(TZ="$place" date +"%X %Z %x (%a)")"'	'"$headup"
  [ -n "$TCPARAMS" ] && comparemethod
  headups="$headups $headup"
  ;;
  *)
  headup="$place"
  [ -z "$WRITTEN" ] && echo '	'"$name" && WRITTEN=yes
  [ -n "$(echo "$headups" | grep -m 1 "$headup")" ] && return
  [ -z "$TCPARAMS" ] && echo '	'"$(TZ="$place" date +"%X %Z %x (%a)")"'	'"$headup"
  [ -n "$TCPARAMS" ] && comparemethod
  headups="$headups $headup"
  ;;
esac
}

# If a local time zone cannot be found when calling --local, this method will
# apply an offset to the time check parameters as a fallback.

fallback (){
# The local time offset should only be applied once.
[ "$PARAMSFIXED" = "yes" ] && return
if [ "$HERE" = "yes" ]; then
  unset OK
  unset OK2
  unset OVERWRITE
  SPACES="$(echo "$TCPARAMS" | tr -cd ' ' | wc -c)"
  count=0
  # One-argument DATETIME is a special case; just apply the offset and go.
  if [ "$SPACES" != "0" ]; then
    # Testing each argument individually; if the arguments up to that point form
    # a valid "date" string when followed by the local time offset, then the
    # last argument tested is the time of day.
    while [ ! "$count" -gt "$SPACES" ] && [ -z "$OK" ]; do
      cutpoint="$((count +1))"
      tester="$(echo "$TCPARAMS" | cut -d' ' -f"$cutpoint")"
      tester2="$tester$(date +%z)"
      # The actual test.
      date --date="$tester2" > /dev/null 2>&1 && OK=yes || true
      # Mitigating three- and four-digit times without colons not working with
      # time offsets in "date".
      if [ -z "$OK" ]; then
        # Isolating the argument that's being examined.
        [ "$cutpoint" = "1" ] && isolate="$tester"
        [ "$cutpoint" != "1" ] && isolate="$(echo "$tester" | cut -d' ' -f-"$((cutpoint - 1))" | cut -d' ' -f"$cutpoint"-)"
        # The possible three- and four-digit times.
        Y="$(echo "$isolate" | grep -x [0-1][0-9][0-5][0-9])"
        Y2="$(echo "$isolate" | grep -x [0-2][0-3][0-5][0-9])"
        Z="$(echo "$isolate" | grep -x [0-9][0-5][0-9])"
        # Inserting a colon.
        if [ -n "$Y" ] || [ -n "$Y2" ]; then
          isolate="$(echo "$isolate" | cut -c-2)"':'"$(echo "$isolate" | cut -c3-)"
          OVERWRITE=yes
        elif [ -n "$Z" ]; then
          isolate="$(echo "$isolate" | cut -c-1)"':'"$(echo "$isolate" | cut -c2-)"
          OVERWRITE=yes
        fi
        # Replacing the incoming argument for testing.
        if [ "$OVERWRITE" = "yes" ]; then
          [ "$cutpoint" = "1" ] && PARAMTEST="$isolate"\ "$(date +%z)"
          [ "$cutpoint" != "1" ] && PARAMTEST="$(echo "$TCPARAMS" | cut -d' ' -f-"$((cutpoint - 1))")"\ "$isolate"\ "$(date +%z)"
          # Checking for a well-formed "date" string again.
          date --date="$PARAMTEST" > /dev/null 2>&1 && OK2=yes || true
        fi
        # If a well-formed date string was found, alter the actual parameter
	# sequence and exit the loop.
        if [ "$OK2" = "yes" ]; then
          [ "$cutpoint" = "1" ] && TCPARAMS="$isolate"\ "$(echo "$TCPARAMS" | cut -d' ' -f"$((cutpoint + 1))"-)" && OK=yes
          [ "$cutpoint" != "1" ] && TCPARAMS="$(echo "$TCPARAMS" | cut -d' ' -f-"$((cutpoint - 1))")"\ "$isolate"\ "$(echo "$TCPARAMS" | cut -d' ' -f"$((cutpoint + 1))"-)" && OK=yes
        fi
      fi
      count=$((count + 1))
    done
    # Putting the time zone information inside TCPARAMS, based on the test
    # above.
    TCPARAMS="$(echo "$TCPARAMS" | cut -d' ' -f-"$cutpoint")"\ "$(date +%z)"\ "$(echo "$TCPARAMS" | cut -d' ' -f"$((cutpoint + 1))"-)"
  # Single-argument case
  else
    # Although "date" accepts four-digit numbers to represent the time in the
    # --date string, it doesn't work with offsets.
    Y="$(echo "$TCPARAMS" | grep -x [0-1][0-9][0-5][0-9])"
    Y2="$(echo "$TCPARAMS" | grep -x [0-2][0-3][0-5][0-9])"
    Z="$(echo "$TCPARAMS" | grep -x [0-9][0-5][0-9])"
    if [ -n "$Y" ] || [ -n "$Y2" ]; then
      TCPARAMS="$(echo "$TCPARAMS" | cut -c-2)"':'"$(echo "$TCPARAMS" | cut -c3-)"
    elif [ -n "$Z" ]; then
      TCPARAMS="$(echo "$TCPARAMS" | cut -c-1)"':'"$(echo "$TCPARAMS" | cut -c2-)"
    fi
    # comparemethod() will be called later, and it has error checking for bad
    # date strings.
    TCPARAMS="$TCPARAMS"\ "$(date +%z)"
  fi
fi
PARAMSFIXED=yes
}

# The method to use in case of time checks with --local or --there.

comparemethod (){
# --there flag was used.
if [ "$THERE" = "yes" ]; then
  ENTRY="--date=TZ=\""$place"\" $TCPARAMS"
  # Error-checking
  TZ="$place" date "$ENTRY" > /dev/null 2>&1 || { echo '	'The check date for "$headup" appears to have a formatting error. ; return ; }
  timedisplay NOFIGURE
  # Want echoes between different time zones, but not at the end of the script
  # or before the next break flag.
  echo && NOECHO=yes
fi

# --local flag was used.
if [ "$HERE" = "yes" ]; then
  unset WORKING
  # If TIMESETTER was passed at install time, test that first.
  [ -n "$TIMESETTER" ] && [ -f "$TIMESETTER" ] && [ -z "$HEREZONE" ] && tzfilecheck "$TIMESETTER"
  # Standard configuration.
  [ -f "/etc/localtime" ] && [ -z "$HEREZONE" ] && [ -z "$WORKING" ] && tzfilecheck /etc/localtime
  # Debian compatibility.
  [ -f "/etc/timezone" ] && [ -z "$HEREZONE" ] && [ -z "$WORKING" ] && tzfilecheck /etc/timezone
  if [ -z "$HEREZONE" ]; then
    # In case the time zone setting method references neither /etc/localtime nor
    # /etc/timezone, and no valid TIMESETTER was passed at installation time.
    SHORTDATE="$(date --date="$TCPARAMS" +"%-z")"
    TRYDATE=GMT"${SHORTDATE%00}"
    if [ -f "$ZONEINFO/"$SUFFIX"Etc/$TRYDATE" ]; then
      HEREZONE=Etc/"$TRYDATE"
    else
      # The above method doesn't work for time zones that have "minutes" in the
      # UTC offset; checking for these here.
      case "$SHORTDATE" in
        -230|-330)
        HEREZONE=America/St_Johns
        ;;
        +330)
        # DST is the same as Kabul.
        HEREZONE=Asia/Tehran
        ;;
        +430)
        HEREZONE=Asia/Kabul
        ;;
        +530)
        HEREZONE=Asia/Kolkata
        ;;
        +545)
        HEREZONE=Asia/Kathmandu
        ;;
        +630)
        # Most-populated.
        if [ -f "$ZONEINFO/$SUFFIX"Asia/Yangon ]; then
          HEREZONE=Asia/Yangon
        else
          # For backwards compatibility.
          HEREZONE=Asia/Rangoon
        fi
        ;;
        +845)
        HEREZONE=Australia/Eucla
        ;;
        +930)
        HEREZONE=Australia/Darwin
        ;;
        +1030)
        # Outside of DST, same as Darwin. Most-populated.
        HEREZONE=Australia/Adelaide
        ;;				
        +1245|+1345)
        HEREZONE=Pacific/Chatham
        ;;
      esac
    fi
  fi
  if [ -n "$HEREZONE" ] && [ -z "$WASMISSING" ]; then
    # Etc/* time zones have inverted signs; fix this here if needed.
    if [ -z "$HEREZONEOK" ] && [ -n "$(echo "$HEREZONE" | grep "Etc/")" ]; then
      HEREZONE="$(echo "$HEREZONE" | tr 'Etc/+' 'Etc/@')"
      HEREZONE="$(echo "$HEREZONE" | tr 'Etc/-' 'Etc/+')"
      HEREZONE="$(echo "$HEREZONE" | tr 'Etc/@' 'Etc/-')"
      HEREZONEOK=yes
    fi
    ENTRY="--date=TZ=\""$HEREZONE"\" $TCPARAMS"
    # Error-checking
    if [ -z "$WRITTEN2" ]; then
      TZ="$place" date "$ENTRY" > /dev/null 2>&1 || { echo '	'The check date for "$headup" appears to have a formatting error. ; return ; }
    fi
    timedisplay NOFIGURE
    WRITTEN2=yes
  elif [ -z "$HEREZONE" ] || [ "$WASMISSING" = "yes" ]; then
    # An alternative method to be used if the actual local time zone can't be
    # found. Somewhat unreliable, as seen in the echo statements below.

    # If this actually happens to you, please raise a GitHub issue or email the
    # author; it's that weird. See man 1 wclock for contact information.
    [ -z "$HEREZONE" ] && fallback && WASMISSING=yes
    if [ -z "$WRITTEN3" ]; then
      echo '	'No local time zone could be found. If the times shown
      echo '	'above fall on different days, the earlier time will
      echo '	'be exactly 24 hours earlier than it should be.
      echo
      WRITTEN3=yes
    fi
    ENTRY="--date=TZ=\""$place"\" $TCPARAMS"
    if [ -z "$WRITTEN2" ]; then
      TZ="$place" date "$ENTRY" > /dev/null 2>&1 || { echo '	'The check date for "$headup" appears to have a formatting error. ; return ; }
    fi
    timedisplay NOFIGURE
    WRITTEN2=yes
  fi
  [ -z "$WRITTEN2" ] && echo && NOECHO=yes
fi
}

# The main loop for each country/city search argument.

main (){
# This only happens if the last search argument is missing; other defective
# arguments are cleared during the case loop.
[ -z "$city" ] && echo && echo '	'No search arguments. && return

# Want to ignore punctuation; clear all existing punctuation first.
city="$(echo "$city" | sed 's|[[:punct:]]||g')"
# Surround all letters with the possibility of punctuation.
city="$(echo "$city" | sed "s|\([[:alpha:]]\)|\1[[:punct:]]*|g")"
city="[[:punct:]]*$city"

# Use a writable $HOME or /tmp directory.
if [ -w "/tmp" ]; then
  ZONETEMPDIR="$(mktemp -d /tmp/wclock.XXXXXXX)"
elif [ -n "$HOME" ] && [ -w "$HOME" ]; then
  ZONETEMPDIR="$(mktemp -d "$HOME"/wclock.XXXXXXX)"
else
  echo
  echo '	'No writable \$HOME or /tmp directory was found.
  echo '	'
  echo '	'Please switch to a user with a writable \$HOME directory
  echo '	'or write permissions in /tmp and try again.
  echo
  exit
fi

ZONETEMP="$ZONETEMPDIR"/zonetemp
EXTRAS="$SHAREDIR"/wclock/extras
COMPAT="$SHAREDIR"/wclock/compat
DEPREC="$SHAREDIR"/wclock/deprecated

[ -z "$NOECHO" ] && echo

# If the extras file is missing, only the directories will be checked.
[ -z "$WARNED" ] && [ ! -f "$EXTRAS" ] && echo '	'"$EXTRAS" was not found. Only named time zones in && echo '	'"$ZONEINFO"/"$SUFFIX" will be searched. && WARNED=yes && echo

unset zone
unset headup
unset headups
unset DONE
# If there's an exact match in the extras file, go with that.
[ -f "$EXTRAS" ] && zone="$(grep -i "^$city	" "$EXTRAS")"
[ -n "$zone" ] && echo "$zone" > "$ZONETEMP"

unset WRITTEN
unset WRITTEN2
unset WRITTEN3
[ -f "$ZONETEMP" ] && while read -r line; do
  unset name
  unset place
  # "name" is the name of the city; "place" is the time zone.
  name="$(echo "$line" | cut -d'	' -f1 | tr '_' ' ')"
  # This sed seems kind of dumb, but "Saint/St./St" is the main source of
  # useless doubles. "St" sed statements appear later, but are not relevant
  # here.
  name="$(echo "$name" | sed 's|^Saint |St. |g')"
  place="$(echo "$line" | cut -d'	' -f2-)"
  # For backwards compatibility, only use the time zone from the extras file if
  # that time zone actually exists on the system. If it does not, proceed to the
  # COMPAT loop.
  if [ -f "$ZONEINFO/$SUFFIX""$place" ]; then
    timedisplay NOCHECK
    DONE=yes
  # For old versions of tzdata (back to 2012a)
  elif [ -f "$COMPAT" ] && [ -n "$(grep -m 1 "$place" "$COMPAT")" ]; then
    place="$(grep -m 1 "$place" "$COMPAT" | cut -d'	' -f2-)"
    timedisplay NOCHECK
    DONE=yes
  fi
done < "$ZONETEMP"

unset DONE2

if [ -z "$DONE" ]; then
  # Search for a match among the named time zones if no exact match was found in
  # extras.
  rm -f "$ZONETEMP"
  unset zone
  unset CHECKLIST
  unset X
  zone="$(find "$ZONEINFO"/"$SUFFIX"* -type f,l | grep -i "$city" | cut -d'/' -f"$SLASHES"-)"
 
  [ -n "$zone" ] && echo "$zone" > "$ZONETEMP"
  [ -f "$ZONETEMP" ] && CHECKLIST=yes

  # If an exact match was found, don't search extras again.
  unset EXACTMATCH
  if [ -f "$ZONETEMP" ]; then
    while read -r line; do
      unset Y
      line2="$(basename "$line")"
      Y="$(echo "$line2" | grep -i -x "$city")"
      [ -n "$Y" ] && EXACTMATCH="yes"
    done < "$ZONETEMP"
  fi
  if [ -z "$EXACTMATCH" ] || [ ! -f "$ZONETEMP" ]; then
    [ -f "$EXTRAS" ] && zones="$(grep -i "$city[[:punct:][:alnum:]]*[[:space:]]" "$EXTRAS")"
    [ -n "$zones" ] && echo "$zones" >> "$ZONETEMP"
  fi

  # To keep results neat and tidy, deprecated time zones should not appear
  # together with their current counterparts (provided that they are in the same
  # ISO-designated country); the "deprecated" list is used here.
  if [ -f "$ZONETEMP" ] && [ -f "$DEPREC" ]; then
    while read -r line; do
      if [ -n "$line" ]; then
        unset DEPRECATED
        unset CURRENT
        # Drawn only from the matches in the zoneinfo directory.
        DEPRECATED="$(grep -i "^$line	" "$DEPREC")"
        [ -n "$DEPRECATED" ] && CURRENT="$(echo "$DEPRECATED" | cut -d'	' -f2-)"
        [ -n "$CURRENT" ] && [ -n "$(grep -i "$CURRENT" "$ZONETEMP")" ] && sed -i "s|^$line$||g" "$ZONETEMP"
      fi	      
    done < "$ZONETEMP"
  fi

  # Now that there might be blank lines, calculate X once and carry through.
  if [ -f "$ZONETEMP" ]; then
    X="$(cat "$ZONETEMP" | wc -l)"
    Y="$(grep -x ^$ "$ZONETEMP" | wc -l)"
    # This gives the number of lines with content.
    X=$((X - Y))
  fi

  # Skip directly to the last compatibility mode check if ZONETEMP is devoid of
  # content.
  [ "$X" = 0 ] && rm -f "$ZONETEMP"

  # If there are multiple results, but they all have the same "name," the header
  # should be displayed. Handling that now.
  unset name
  unset lastname
  unset NOHEADER
  samename=yes
  if [ -f "$ZONETEMP" ]; then
    while read -r line; do
      [ -n "$name" ] && lastname="$name"
      if [ -n "$samename" ] && [ -n "$line" ]; then
        # Result originated in zoneinfo.
        if [ -z "$(echo "$line" | grep -m 1 '	')" ]; then
          name="$(basename "$line")"
          name="$(echo "$name" | sed 's|^Saint_|St._|g')"
          name="$(echo "$name" | sed 's|^St_|St._|g')"
        # Result originated in extras.
        else
          name="$(echo "$line" | cut -d'	' -f1)"
          name="$(echo "$name" | sed 's|^Saint_|St._|g')"
        fi
        [ -n "$lastname" ] && [ "$name" != "$lastname" ] && unset samename
      fi
    done < "$ZONETEMP"
    [ -z "$samename" ] && NOHEADER=NOHEADER
  fi

  # If one or more matches was found among the named time zones, display.
  if [ -n "$zone" ] && [ -f "$ZONETEMP" ]; then
    while read -r place; do
      # The interesting lines have no tabs; time zone names only.
      if [ -n "$place" ] && [ -z "$(echo "$place" | grep -m 1 '	')" ]; then
        # For display purposes.
        name="$(basename "$place" | tr '_' ' ')"
        name="$(echo "$name" | sed 's|^Saint |St. |g')"
        # The extras file contains "St." instead of "St" by design, so this
	# statement is only relevant for zoneinfo matches.
        name="$(echo "$name" | sed 's|^St |St. |g')"
        timedisplay "$NOHEADER"
        DONE2=yes
      fi
    done < "$ZONETEMP"
  fi

  # Only go forward if no exact match found up to this point (zones cannot exist
  # otherwise).
  if [ -n "$zones" ]; then
    [ -f "$ZONETEMP" ] && while read -r line; do
      # Only interested in lines with tabs this time.
      if [ -n "$(echo "$line" | grep -m 1 '	')" ]; then
        unset name
        unset place
        name="$(echo "$line" | cut -d'	' -f1 | tr '_' ' ')"
        name="$(echo "$name" | sed 's|^Saint |St. |g')"
        place="$(echo "$line" | cut -d'	' -f2-)"
        if [ -f "$ZONEINFO/$SUFFIX""$place" ]; then
          timedisplay "$NOHEADER"
          DONE2=yes
        elif [ -f "$COMPAT" ] && [ -n "$(grep -m 1 "$place" "$COMPAT")" ]; then
          place="$(grep -m 1 "$place" "$COMPAT" | cut -d'	' -f2-)"
          timedisplay "$NOHEADER"
          DONE2=yes
        fi
      fi
    done < "$ZONETEMP"
  fi
 
  # A last-ditch attempt with COMPAT, in case of old version and unlucky time
  # zone check.
  if [ -z "$DONE2" ] && [ -f "$COMPAT" ]; then
    rm -f "$ZONETEMP"
    unset zone
    unset X
    zone="$(grep -i "/$city	" "$COMPAT")"
    [ -n "$zone" ] && echo "$zone" > "$ZONETEMP"
    [ -f "$ZONETEMP" ] && X="$(cat "$ZONETEMP" | wc -l)"
    unset WRITTEN
    [ -f "$ZONETEMP" ] && while read -r line; do
      unset name
      unset place
      name="$(echo "$line" | cut -d'/' -f2- | cut -d'	' -f1 | tr '_' ' ')"
      name="$(echo "$name" | sed 's|^Saint |St. |g')"
      name="$(echo "$name" | sed 's|^St |St. |g')"
      place="$(echo "$line" | cut -d'	' -f2-)"
      if [ -f "$ZONEINFO/$SUFFIX""$place" ]; then
        if [ "$X" != "1" ]; then	
          timedisplay NOHEADER
        else
          timedisplay
        fi
      fi
    done < "$ZONETEMP"
  fi

  # Bad luck; nothing was found.
  [ ! -f "$ZONETEMP" ] && echo '	'The search term revealed no time zones.
fi

# Cleaning up.
rm -rf "$ZONETEMPDIR"
}

unset city
unset SUFFIX
unset SLASHES
unset THERE
unset HERE
unset NOECHO
unset TCPARAMS
unset PARAMSFIXED
unset WARNED
unset HEREZONE
unset HEREZONEOK
unset WASMISSING

for arg in "$@"; do
  case "$arg" in
    -h|--help)
    echo
    echo wclock - Retrieve world times based on a search term.
    echo
    echo SYNTAX:
    echo wclock [-t\|--there DATETIME -b] SEARCH [-b\|--break SEARCH] ...
    echo wclock [-l\|--local DATETIME -b] SEARCH [-b\|--break SEARCH] ...
    echo
    echo OPTIONS:
    echo -b\|--break - Enter between search terms to retrieve multiple time zones.
    echo
    echo -t\|--there - Find your local time when it is DATETIME in SEARCH.
    echo
    echo -l\|--local - Find the time in SEARCH when it is DATETIME in your time. Like "date," the TZ
    echo '	'parameter can be used to spoof a different local time zone.
    echo
    echo -v\|--version - Show wclock\'s version and tzdata compatibility information.
    echo
    echo -h\|--help - Show this help menu.
    echo
    echo SEARCH - A city or country. Available cities include the namesakes of all defined time zones, as
    echo '	'well as a selection of other areas with a population of 400,000 or more.
    echo
    echo DATETIME - A past or future date and/or time to check. wclock will add any required time zone
    echo '	'information automatically. In general, the syntax is [DAY] TIME [DAY]. DAY can be a day
    echo '	'of the week \(in English\), a full date, etc. For example,
    echo
    echo '		'wclock --there 16:00 next Thu -b washington
    echo '		'wclock --local 12:00 2021/09/26 -b india
    echo
    echo '	'See date\(1\) for more information about formatting.
    echo
    echo A man page can be found at wclock\(1\).
    echo
    exit
    ;;
    -v|--version)
    echo
    echo '	'wclock-"$VER"
    echo '	'Checked against tzdata-2022a \(compatible from tzdata-2012a onward\).
    echo
    exit
    ;;
    -b|--break)
    [ -z "$CHECKEDZONEINFO" ] && checkzoneinfo && CHECKEDZONEINFO=yes
    [ -n "$city" ] &&  main
    unset city
    unset GETPARAM
    ;;
    -t|--there)
    [ -z "$CHECKEDZONEINFO" ] && checkzoneinfo && CHECKEDZONEINFO=yes
    [ -n "$city" ] && main
    unset city
    unset HERE	
    GETPARAM=yes
    unset TCPARAMS
    unset PARAMSFIXED
    THERE=yes
    ;;
    -l|--local)
    [ -z "$CHECKEDZONEINFO" ] && checkzoneinfo && CHECKEDZONEINFO=yes
    [ -n "$city" ] && main
    unset city
    unset THERE
    GETPARAM=yes
    unset TCPARAMS
    unset PARAMSFIXED
    HERE=yes
    ;;
    *)
    [ -z "$CHECKEDZONEINFO" ] && checkzoneinfo && CHECKEDZONEINFO=yes
    # Gather arguments for specific time checks between -t or -l and any other
    # parameter.
    if [ "$GETPARAM" = "yes" ]; then
      if [ -z "$TCPARAMS" ]; then
        TCPARAMS="$arg"
      else
        TCPARAMS="$TCPARAMS"\ "$arg"
      fi
    else
      # Accounting for multi-word city and country names.
      city="$city""$arg"
    fi
    ;;
  esac
done
main
[ -z "$NOECHO" ] && echo
